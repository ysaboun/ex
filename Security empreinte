Voici un exemple complet d’intégration de **AbuseIPDB** et **FingerprintJS** pour créer une solution qui génère des empreintes d’appareils et vérifie les adresses IP contre une base de données d'activités malveillantes.

---

### **Objectif**  
1. Générer une empreinte unique pour chaque appareil (FingerprintJS).  
2. Vérifier l’adresse IP de l’utilisateur via l’API REST d’AbuseIPDB pour détecter tout comportement suspect.  
3. Centraliser les résultats dans une base locale (MongoDB).

---

### **Étape 1 : Configuration**

#### Prérequis
- **Node.js** pour le backend.
- **FingerprintJS** pour le front-end.
- **MongoDB** pour stocker les données localement (optionnel).
- Une clé API pour AbuseIPDB (obtenez-la sur leur site).

---

### **Étape 2 : Frontend (React avec FingerprintJS)**

Ajoutez **FingerprintJS** pour collecter les empreintes des appareils.

#### Installation
```bash
npm install @fingerprintjs/fingerprintjs
```

#### Exemple de composant React
```javascript
import React, { useEffect, useState } from "react";
import FingerprintJS from "@fingerprintjs/fingerprintjs";

const FingerprintComponent = () => {
  const [visitorId, setVisitorId] = useState("");

  useEffect(() => {
    // Charge FingerprintJS
    const fpPromise = FingerprintJS.load();

    fpPromise
      .then(fp => fp.get())
      .then(result => {
        const { visitorId } = result;
        setVisitorId(visitorId);

        // Envoyer les données au backend
        fetch("http://localhost:5000/analyze", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ visitorId, ip: "auto" }), // Utilisez "auto" pour capturer l'IP côté backend.
        }).then(res => res.json()).then(data => console.log(data));
      });
  }, []);

  return <div>Votre ID unique : {visitorId}</div>;
};

export default FingerprintComponent;
```

---

### **Étape 3 : Backend (Node.js avec Express)**

Créez un serveur qui :  
1. Récupère les données de FingerprintJS et de l’IP.  
2. Interroge AbuseIPDB pour analyser l’IP.  
3. (Optionnel) Stocke les résultats dans MongoDB.

#### Installation des dépendances
```bash
npm install express axios body-parser mongoose dotenv
```

#### Fichier backend complet
```javascript
const express = require("express");
const axios = require("axios");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
require("dotenv").config();

const app = express();
const PORT = 5000;

// Middleware
app.use(bodyParser.json());

// MongoDB configuration (optionnel)
mongoose.connect("mongodb://localhost:27017/fingerprintDB", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const FingerprintSchema = new mongoose.Schema({
  visitorId: String,
  ip: String,
  abuseConfidenceScore: Number,
  reports: Number,
  createdAt: { type: Date, default: Date.now },
});

const Fingerprint = mongoose.model("Fingerprint", FingerprintSchema);

// API REST pour analyser les empreintes et l'IP
app.post("/analyze", async (req, res) => {
  const { visitorId, ip } = req.body;

  try {
    // Obtenir l'adresse IP réelle si "auto" est spécifié
    const clientIP = req.headers["x-forwarded-for"] || req.connection.remoteAddress || ip;

    // Appel à l'API AbuseIPDB
    const abuseResponse = await axios.get("https://api.abuseipdb.com/api/v2/check", {
      params: { ipAddress: clientIP, maxAgeInDays: 90 },
      headers: {
        Key: process.env.ABUSEIPDB_API_KEY,
        Accept: "application/json",
      },
    });

    const { abuseConfidenceScore, totalReports } = abuseResponse.data.data;

    // Stocker dans MongoDB (optionnel)
    const fingerprint = new Fingerprint({
      visitorId,
      ip: clientIP,
      abuseConfidenceScore,
      reports: totalReports,
    });
    await fingerprint.save();

    // Retourner les résultats
    res.json({
      visitorId,
      ip: clientIP,
      abuseConfidenceScore,
      reports: totalReports,
    });
  } catch (error) {
    console.error("Erreur :", error.message);
    res.status(500).json({ error: "Erreur lors de l'analyse" });
  }
});

app.listen(PORT, () => {
  console.log(`Serveur démarré sur le port ${PORT}`);
});
```

---

### **Étape 4 : Exemple de configuration de `.env`**

Ajoutez vos clés API et configurations dans un fichier `.env` :
```
ABUSEIPDB_API_KEY=YOUR_API_KEY
```

---

### **Étape 5 : Test de l'application**

#### a. Lancer MongoDB (optionnel)  
```bash
mongod
```

#### b. Démarrer le backend  
```bash
node server.js
```

#### c. Démarrer le frontend  
```bash
npm start
```

#### d. Accéder à l'application  
- Ouvrez `http://localhost:3000` pour voir l’empreinte générée.  
- Les résultats sont envoyés au backend, analysés avec AbuseIPDB, et sauvegardés dans MongoDB.

---

### **Étape 6 : Résultat attendu**

1. **Frontend** : Affiche une empreinte unique pour chaque visiteur.  
2. **Backend** : Analyse l’adresse IP de l’utilisateur avec AbuseIPDB.  
3. **Base MongoDB (optionnel)** : Stocke l’empreinte, l’IP, le score d’abus et les rapports.

---

### **Structure des données sauvegardées dans MongoDB**

Exemple d’un document MongoDB :
```json
{
  "_id": "64db1e15e413b2a6d8a0c3f2",
  "visitorId": "abc123def456",
  "ip": "8.8.8.8",
  "abuseConfidenceScore": 75,
  "reports": 10,
  "createdAt": "2024-12-22T15:00:00Z"
}
```

---

### **Résumé**
- **Frontend** : Génère une empreinte unique avec FingerprintJS.  
- **Backend** : Vérifie l’IP avec AbuseIPDB et retourne un score de confiance.  
- **Optionnel** : Sauvegarde les résultats dans MongoDB pour analyse future.  

Cette solution peut être étendue pour ajouter des mécanismes d’alerte, des tableaux de bord ou des intégrations avec d'autres services.
