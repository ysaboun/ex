Voici un exemple montrant comment stocker et récupérer un **refresh token** de manière sécurisée dans **IndexedDB** en utilisant l'API Web Crypto depuis un **service worker**.

### Étapes principales :
1. **Génération d'une clé cryptographique**.
2. **Chiffrement du refresh token avant de le stocker dans IndexedDB**.
3. **Déchiffrement du refresh token lors de sa récupération**.

---

### Code Complet :

#### 1. Initialisation de IndexedDB

```javascript
// Création ou ouverture de la base de données IndexedDB
function openDatabase() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('SecureTokenDB', 1);

        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            // Création d'une object store pour les tokens
            if (!db.objectStoreNames.contains('tokens')) {
                db.createObjectStore('tokens', { keyPath: 'id' });
            }
        };

        request.onsuccess = (event) => resolve(event.target.result);
        request.onerror = (event) => reject(event.target.error);
    });
}
```

---

#### 2. Génération d'une clé cryptographique

```javascript
async function generateCryptoKey() {
    return await crypto.subtle.generateKey(
        { name: 'AES-GCM', length: 256 },
        true,
        ['encrypt', 'decrypt']
    );
}
```

---

#### 3. Stockage sécurisé du refresh token

```javascript
async function storeRefreshToken(token) {
    const db = await openDatabase();
    const key = await generateCryptoKey();

    // Chiffrement du token
    const iv = crypto.getRandomValues(new Uint8Array(12)); // Initialisation vector
    const encryptedData = await crypto.subtle.encrypt(
        { name: 'AES-GCM', iv: iv },
        key,
        new TextEncoder().encode(token)
    );

    // Sauvegarde dans IndexedDB
    return new Promise((resolve, reject) => {
        const transaction = db.transaction('tokens', 'readwrite');
        const store = transaction.objectStore('tokens');
        store.put({
            id: 'refreshToken',
            encryptedData: new Uint8Array(encryptedData),
            iv: iv
        });

        transaction.oncomplete = () => resolve(true);
        transaction.onerror = (event) => reject(event.target.error);
    });
}
```

---

#### 4. Récupération et déchiffrement du refresh token

```javascript
async function getRefreshToken() {
    const db = await openDatabase();

    // Récupération des données dans IndexedDB
    const encryptedRecord = await new Promise((resolve, reject) => {
        const transaction = db.transaction('tokens', 'readonly');
        const store = transaction.objectStore('tokens');
        const request = store.get('refreshToken');

        request.onsuccess = () => resolve(request.result);
        request.onerror = (event) => reject(event.target.error);
    });

    if (!encryptedRecord) throw new Error('Refresh token non trouvé.');

    const { encryptedData, iv } = encryptedRecord;

    // Re-génération ou récupération de la clé cryptographique
    const key = await generateCryptoKey();

    // Déchiffrement des données
    const decryptedData = await crypto.subtle.decrypt(
        { name: 'AES-GCM', iv: iv },
        key,
        encryptedData
    );

    return new TextDecoder().decode(decryptedData);
}
```

---

### Utilisation

Dans un service worker (ou dans un autre contexte), vous pouvez utiliser ces fonctions comme suit :

```javascript
self.addEventListener('install', async (event) => {
    event.waitUntil(
        (async () => {
            await storeRefreshToken('mon-refresh-token-secure');
            const token = await getRefreshToken();
            console.log('Token déchiffré:', token);
        })()
    );
});
```

---

### Points Clés :
1. **Sécurité avec AES-GCM** : Cette méthode garantit la confidentialité et l'intégrité des données.
2. **IV aléatoire** : Chaque chiffrement utilise un vecteur d'initialisation unique pour renforcer la sécurité.
3. **IndexedDB pour le stockage** : Permet de gérer des données structurées dans le navigateur.

> Note : Dans un contexte réel, veillez à sécuriser la clé de chiffrement, par exemple, en l'obtenant depuis un serveur sécurisé ou en utilisant une méthode de dérivation de clé (comme PBKDF2).
